{"version":3,"sources":["Component/Card Component/Card.component.jsx","Component/Card-List/Card-List.component.jsx","Component/SearchBox/SearchBox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","mons","name","email","CardList","monst","map","monster","id","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","monsters","fetch","then","response","json","users","this","filteredMonster","filter","mon","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,SAASC,IAAM,+DACxB,6BAAKH,EAAMI,KAAKC,OAChB,4BAAIL,EAAMI,KAAKE,YCHVC,EAAW,SAAAP,GAAK,OAC7B,qBAAKC,UAAU,YAAf,SACKD,EAAMQ,MAAMC,KAAI,SAAAC,GAAO,OACpB,cAAC,EAAD,CAAuBN,KAAMM,GAAlBA,EAAQC,UCJdC,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,8BACI,uBACAb,UAAY,SACZc,KAAO,SACPF,YAAeA,EACfG,SAAYF,QCiCLG,E,kDApCb,aAAc,IAAD,8BACX,gBAaJH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbnC,EAAKC,MAAQ,CACXC,SAAU,GACVJ,YAAa,IAJJ,E,qDAQb,WAAqB,IAAD,OAClBK,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACK,SAAUK,S,oBAO5C,WACE,MAA+BC,KAAKP,MAA9BC,EAAN,EAAMA,SAAUJ,EAAhB,EAAgBA,YACVW,EAAkBP,EAASQ,QAAO,SAAAC,GAAG,OACzCA,EAAI5B,KAAK6B,cAAcC,SAASf,EAAYc,kBAChD,OAEE,sBAAKjC,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CACEY,YAAa,iBACbC,aAAgBgB,KAAKhB,eAEvB,cAAC,EAAD,CAAUN,MAAQuB,W,GA/BNK,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.55cacf37.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Card.style.css'\r\n\r\nexport const Card = props=>(\r\n    <div className='card-container'>\r\n        <img alt='Source' src= {'https://robohash.org/{props.mons.id}?set=set2&size=180x180'}/>\r\n        <h2>{props.mons.name}</h2>\r\n        <p>{props.mons.email}</p>\r\n    </div>\r\n)","import React from \"react\";\r\nimport './Card-List.style.css'\r\nimport { Card } from '../Card Component/Card.component'\r\n\r\nexport const CardList = props => (\r\n<div className='card-list'>\r\n    {props.monst.map(monster=>\r\n        <Card key={monster.id} mons={monster}/>\r\n        )}\r\n</div>\r\n)","import React from \"react\";\r\nimport './SearchBox.style.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange})=>(\r\n    <div>\r\n        <input\r\n        className = 'search'\r\n        type = 'search'\r\n        placeholder = {placeholder}\r\n        onChange = {handleChange}\r\n        />\r\n    </div>\r\n)","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { CardList } from './Component/Card-List/Card-List.component';\r\nimport { SearchBox } from './Component/SearchBox/SearchBox.component';\r\n\r\nclass App extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => this.setState({monsters: users}));\r\n  }\r\n\r\nhandleChange = (e)=>{\r\n  this.setState({searchField: e.target.value})\r\n}\r\n\r\n  render(){\r\n    const{monsters, searchField} = this.state\r\n    const filteredMonster = monsters.filter(mon=>\r\n      mon.name.toLowerCase().includes(searchField.toLowerCase()))\r\n  return (\r\n\r\n    <div className=\"App\">\r\n      <h1>Monster Arun Test</h1>\r\n      <SearchBox\r\n        placeholder ='search monster'\r\n        handleChange = {this.handleChange}\r\n      />\r\n      <CardList monst= {filteredMonster}/>\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}